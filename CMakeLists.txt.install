# vim: set filetype=cmake
# vim: set syntax=cmake

# specify the target to install (calculator library defined above)
# set the export name <name>-config (does not need to match target name)
# also specify where the .dylib/.so/.dll+.lib file should be installed

# symlink thi lib for install
# http://www.faqs.org/docs/Linux-HOWTO/Program-Library-HOWTO.html
# set so version as major number
# > SET(CMAKE_INSTALL_LIBDIR lib CACHE PATH "Output directory for libraries")
# configure_file(${CMAKE_MODULE_PATH}mylib.pc.in ${APP_NAME}.pc @ONLY)
message(STATUS "Project will be installed to ${CMAKE_INSTALL_PREFIX}")
include(GNUInstallDirs)
message(STATUS "CMAKE_LIBRARY_ARCHITECTURE=${CMAKE_LIBRARY_ARCHITECTURE}")
message(STATUS "CMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})

# Offer the user the choice of overriding the installation directories
set(INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR}/${CMAKE_LIBRARY_ARCHITECTURE} CACHE PATH "Installation directory for libraries")
set(INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH "Installation directory for executables")
set(INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH "Installation directory for header files")

set(DEF_INSTALL_CMAKEDIR share/cmake/${PROJECT_NAME})
set(INSTALL_CMAKEDIR ${DEF_INSTALL_CMAKEDIR} CACHE PATH "Installation directory for CMake files")

# Report to user
foreach(p LIB BIN INCLUDE CMAKE)
    file(TO_NATIVE_PATH ${CMAKE_INSTALL_PREFIX}/${INSTALL_${p}DIR} _path )
    message(STATUS "Installing ${p} components to ${_path}")
    unset(_path)
endforeach()

# <<< Install and export targets >>>

install(
    TARGETS ${APP_NAME}
    EXPORT ${APP_NAME}Targets
    ARCHIVE DESTINATION ${INSTALL_LIBDIR} COMPONENT lib
    RUNTIME DESTINATION ${INSTALL_BINDIR} COMPONENT bin
    LIBRARY DESTINATION ${INSTALL_LIBDIR} COMPONENT lib
    PUBLIC_HEADER DESTINATION ${INSTALL_INCLUDEDIR}/${APP} COMPONENT dev
    )



install(
    EXPORT ${APP_NAME}Targets
    NAMESPACE ${APP_NAME}::
    DESTINATION
    ${INSTALL_CMAKEDIR} COMPONENT dev
    )


include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/${APP_NAME}ConfigVersion.cmake
    VERSION ${APP_VERSION}
    COMPATIBILITY SameMajorVersion
    )

configure_package_config_file(
    ${CMAKE_MODULE_PATH}/Config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/${APP_NAME}Config.cmake
    INSTALL_DESTINATION ${INSTALL_CMAKEDIR}
    )

install(
    FILES
    ${CMAKE_CURRENT_BINARY_DIR}/${APP_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/${APP_NAME}ConfigVersion.cmake
    DESTINATION ${INSTALL_CMAKEDIR}
    )


# install(
#     FILES ${PUBLIC_INC}
#     DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${APP_NAME}/include)

install(
    FILES ${PUBLIC_INC}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${APP_NAME})

# ${date_INCLUDE_DIRS}

install(
    FILES ${DATE_INC}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/date)


# add_custom_target(uninstall
# "${CMAKE_COMMAND}" -P "${CMAKE_MODULE_PATH}/uninstall.cmake")

